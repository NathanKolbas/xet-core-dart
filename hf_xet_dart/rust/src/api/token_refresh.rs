use flutter_rust_bridge::{frb, DartFnFuture};
pub use utils::auth::{TokenInfo, TokenRefresher};
use utils::errors::AuthError;

pub struct DartTokenInfo {
    pub token: String,
    /// unixtime (in seconds) of expiration
    pub expiration: u64,
}

/// A wrapper struct of a dart function to refresh the CAS auth token.
/// Since tokens are generated by hub, we want to be able to refresh the
/// token using the hub client, which is only available in python.
#[frb(ignore)]
pub struct WrappedTokenRefresher {
    /// The function responsible for refreshing a token.
    /// Expects no inputs and returns a (str, u64) representing the new token
    /// and the unixtime (in seconds) of expiration, raising an exception
    /// if there is an issue.
    dart_func: Box<dyn Fn() -> DartFnFuture<DartTokenInfo> + Send + Sync>,
}

impl WrappedTokenRefresher {
    #[frb(ignore)]
    pub fn from_func(dart_func: impl Fn() -> DartFnFuture<DartTokenInfo> + Send + Sync + 'static) -> WrappedTokenRefresher {
        Self { dart_func: Box::new(dart_func) }
    }
}

#[async_trait::async_trait]
impl TokenRefresher for WrappedTokenRefresher {
    async fn refresh(&self) -> Result<TokenInfo, AuthError> {
        // TODO: Handle error?
        let token_info = (self.dart_func)().await;
        Ok((token_info.token, token_info.expiration))
    }
}
