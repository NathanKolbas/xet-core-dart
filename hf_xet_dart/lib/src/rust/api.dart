// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'api/token_refresh.dart';
import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they are not marked as `pub`: `__repr__`, `__repr__`, `__str__`, `__str__`, `convert_data_processing_error`, `try_parse_progress_updaters`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `clone`, `fmt`, `fmt`, `from`, `from`
// These functions are ignored (category: IgnoreBecauseExplicitAttribute): `force_sigint_shutdown`

Future<List<DartXetUploadInfo>> uploadBytes({
  required List<Uint8List> fileContents,
  String? endpoint,
  String? hfHome,
  (String, BigInt)? tokenInfo,
  required FutureOr<DartTokenInfo> Function() tokenRefresher,
  required FutureOr<void> Function(BigInt) progressUpdater,
  String? repoType,
}) => RustLib.instance.api.crateApiUploadBytes(
  fileContents: fileContents,
  endpoint: endpoint,
  hfHome: hfHome,
  tokenInfo: tokenInfo,
  tokenRefresher: tokenRefresher,
  progressUpdater: progressUpdater,
  repoType: repoType,
);

Future<List<DartXetUploadInfo>> uploadFiles({
  required List<String> filePaths,
  String? endpoint,
  String? hfHome,
  (String, BigInt)? tokenInfo,
  required FutureOr<DartTokenInfo> Function() tokenRefresher,
  required FutureOr<void> Function(BigInt) progressUpdater,
  String? repoType,
}) => RustLib.instance.api.crateApiUploadFiles(
  filePaths: filePaths,
  endpoint: endpoint,
  hfHome: hfHome,
  tokenInfo: tokenInfo,
  tokenRefresher: tokenRefresher,
  progressUpdater: progressUpdater,
  repoType: repoType,
);

Future<List<String>> downloadFiles({
  required List<DartXetDownloadInfo> files,
  String? endpoint,
  String? hfHome,
  (String, BigInt)? tokenInfo,
  required FutureOr<DartTokenInfo> Function() tokenRefresher,
  required FutureOr<void> Function(String, BigInt) progressUpdater,
}) => RustLib.instance.api.crateApiDownloadFiles(
  files: files,
  endpoint: endpoint,
  hfHome: hfHome,
  tokenInfo: tokenInfo,
  tokenRefresher: tokenRefresher,
  progressUpdater: progressUpdater,
);

Future<void> hfXet({
  required FutureOr<String> Function() dartVersion,
  required FutureOr<String> Function() hfXetVersion,
  required FutureOr<String?> Function() huggingfaceHubVersion,
}) => RustLib.instance.api.crateApiHfXet(
  dartVersion: dartVersion,
  hfXetVersion: hfXetVersion,
  huggingfaceHubVersion: huggingfaceHubVersion,
);

class DartXetDownloadInfo {
  final String destinationPath;
  final String hash;
  final BigInt fileSize;

  const DartXetDownloadInfo({
    required this.destinationPath,
    required this.hash,
    required this.fileSize,
  });

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  static Future<DartXetDownloadInfo> newInstance({
    required String destinationPath,
    required String hash,
    required BigInt fileSize,
  }) => RustLib.instance.api.crateApiDartXetDownloadInfoNew(
    destinationPath: destinationPath,
    hash: hash,
    fileSize: fileSize,
  );

  @override
  int get hashCode =>
      destinationPath.hashCode ^ hash.hashCode ^ fileSize.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is DartXetDownloadInfo &&
          runtimeType == other.runtimeType &&
          destinationPath == other.destinationPath &&
          hash == other.hash &&
          fileSize == other.fileSize;
}

class DartXetUploadInfo {
  final String hash;
  final BigInt fileSize;

  const DartXetUploadInfo({required this.hash, required this.fileSize});

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  static Future<DartXetUploadInfo> newInstance({
    required String hash,
    required BigInt fileSize,
  }) => RustLib.instance.api.crateApiDartXetUploadInfoNew(
    hash: hash,
    fileSize: fileSize,
  );

  @override
  int get hashCode => hash.hashCode ^ fileSize.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is DartXetUploadInfo &&
          runtimeType == other.runtimeType &&
          hash == other.hash &&
          fileSize == other.fileSize;
}
